[{"path":"index.html","id":"jasons-cse-560-notes","chapter":"Jason’s CSE 560 Notes","heading":"Jason’s CSE 560 Notes","text":"Hello anyone reading . Jason Caballes’ notes CSE 560 :)","code":""},{"path":"data-model-overview.html","id":"data-model-overview","chapter":"1 Data Model Overview","heading":"1 Data Model Overview","text":"","code":""},{"path":"data-model-overview.html","id":"relational-model-basics","chapter":"1 Data Model Overview","heading":"1.1 Relational Model Basics","text":"","code":""},{"path":"data-model-overview.html","id":"what-is-a-data-model","chapter":"1 Data Model Overview","heading":"1.1.1 What is a data model?","text":"data model abstract abstract model describe collection data can interact .Data models contain three parts:\n1. Structure Data\n2. Operation Data\n3. Constraints Data","code":""},{"path":"data-model-overview.html","id":"types-of-data-models","chapter":"1 Data Model Overview","heading":"1.1.2 Types of Data Models","text":"two mainstream types data models:\n1. Relational Models\n2. Semi-structured ModelsRelational models include object_relational models. Operations applied relational models based relational algebra. Data organized two-dimensional table called relation.use relations? Relations simple intuitive use. also models underly SQL. Object-relational extentions also add storage non-primitive objects methods relations.Semi-structured Models typically store tree based data like XML files. Data data types organized tags (think HTML tags).","code":""},{"path":"data-model-overview.html","id":"relational-models-structure-operations-constraints","chapter":"1 Data Model Overview","heading":"1.1.3 Relational Models: Structure, Operations, Constraints","text":"Columns called attributes. describe information provided.schema describes name relation set attributes relation.Attributes schema set list (values unique order matter). creating relation schema, order attributes matter.set schemas relations database know “Database Schema”.Tuples rows relation.\ncomponent tuple’s value attribute provided schema.\ntuples one component attribute provided schema. practice, start relation name capital letter attributes lowercase letter.\ndomain attribute/tuple data type associated . domains must atomic (primitive) data types.\nRelations sets tuples, therefore tuples relation unique order relations matter.\n_subset tuples__ relation known instance relation.\ncan reorder attributes therefore components instance, however changing order relation’s schema changes default attribute order new instances relation.\nDatabase systems store relation instance mimics relation’s schema. instance known current instance.\nPast versions current instance called temporal instances","code":""},{"path":"data-model-overview.html","id":"relation-keys","chapter":"1 Data Model Overview","heading":"1.1.4 Relation Keys","text":"set attributes relation form key allow two tuples relation values set attributes. , tuple, components must unique tuples attributes assigned key.\nset attributes key relation, set attributes must key instances relation.\nMany real-world databases use artificial keys (think UB person Number).\nKeys pretty common industry.","code":""},{"path":"data-model-overview.html","id":"defining-relationship-schemas-in-sql","chapter":"1 Data Model Overview","heading":"1.2 Defining Relationship Schemas in SQL","text":"current standard SQL SQL-99. two aspects SQL:\n1. Data-Definition declare database schemas\n2. Data_Manipulation sub-language querying/modifying databases","code":""},{"path":"data-model-overview.html","id":"relations-in-sql","chapter":"1 Data Model Overview","heading":"1.2.1 Relations in SQL","text":"SQL makes distinction three kinds relations:\n1. Stored relations, called tables\n2. Views, relations designed computation. relations stored, constructed needed\n3. Temporary Tables constructed SQL language processor executing queries data modifications. relations stored discarded longer used.declare schema stored relation, following","code":"CREATE TABLE -- SOME TABLE NAME --"},{"path":"data-model-overview.html","id":"data-types","chapter":"1 Data Model Overview","heading":"1.2.2 Data Types","text":"following primitive data types supported SQL","code":""},{"path":"data-model-overview.html","id":"character-strings","chapter":"1 Data Model Overview","heading":"1.2.2.1 Character Strings","text":"can fixed variable length. type fixed length character string, use CHAR(n) length \\(n\\). create variable length character string, use VARCHAR(n) length \\(n\\). component tuple domain CHAR(n) given length component less \\(n\\), component padded white space.","code":""},{"path":"data-model-overview.html","id":"bit-strings","chapter":"1 Data Model Overview","heading":"1.2.2.2 Bit Strings","text":"Bit strings can fixed varying length. data type analogous character strings, values strings bits rather characters.","code":""},{"path":"data-model-overview.html","id":"booleans","chapter":"1 Data Model Overview","heading":"1.2.2.3 BOOLEANs","text":"Booleans denote attribute whose value logical. possible values boolean can take TRUE, FALSE, UNKNOWN.","code":""},{"path":"data-model-overview.html","id":"ints","chapter":"1 Data Model Overview","heading":"1.2.2.4 INTs","text":"Ints (Integers) denote integer value. SHORTINT also int may less bits.","code":""},{"path":"data-model-overview.html","id":"floating-point-numbers","chapter":"1 Data Model Overview","heading":"1.2.2.5 Floating-Point Numbers","text":"Floating points denoted FLOAT REAL. like higher precision floats, use DOUBLE PRECISION. Like character strings, floats can fixed decimal length. can declare decimal length calling DECIMAL(n, d) \\(n\\) total number digits allowed float nad \\(d\\) number digits passed decimal.","code":""},{"path":"data-model-overview.html","id":"dates-and-times","chapter":"1 Data Model Overview","heading":"1.2.2.6 Dates and Times","text":"Dates times declared using DATE TIME respectively. Dates times special form character strings. Adding string DATE declaration specifies format date. example DATE '1948-05-14' creates date value form “YYYY-MM-DD”. can done time. example TIME '15:00:02.5' specifies want represent time format “HH:MM:SS” attachment milliseconds.follow simple example Relation Schema declaration","code":"CREATE TABLE Movies(\n  title CHAR(100) -- Character string with 100 characters\n  ,year INT\n  ,lengh INT\n  ,genre CHAR(10)\n  ,studioName CHAR(30)\n  ,producerC# INT\n);"},{"path":"data-model-overview.html","id":"modifying-relation-schemas","chapter":"1 Data Model Overview","heading":"1.2.3 Modifying Relation Schemas","text":"delete “drop” table database, execute followingWhen dropping able, table longer exists database schema. modify existing table, use ALTER keyword","code":"DROP TABLE -- SOME TABLE --;---- Modifying a table to add a new attribute to its schema ----\nALTER TABLE -- SOME TABLE -- ADD -- SOME ATTRIBUTE -- CHAR(16); \n\n---- Modifying a table to remove an attribute from its schema ----\nALTER TABLE -- SOME TABLE -- DROP -- SOME ATTRIBUTE IN SCHEMA --; "},{"path":"data-model-overview.html","id":"default-values","chapter":"1 Data Model Overview","heading":"1.2.4 Default Values","text":"adding new attribute relation’s schema, tuples require value attribute. Database systems default value NULL, want specific value default ? data uploaded randomly tuples values component? case can use DEFAULT keyword add specific value instead using NULL.","code":"---- Creating attributes and adding a default value when no data is made available ----\ngender CHAR(1) DEFAULT '?'\nname VARCHAR(10) DEFAULT 'No Name :('"},{"path":"data-model-overview.html","id":"declaring-keys","chapter":"1 Data Model Overview","heading":"1.2.4.1 Declaring Keys","text":"two ways assign set attributes key. Keys defined declaration database schema, .e. CREATE TABLE statement.Use PRIMARY KEY UNIQUE declare set attributes key. Remember, keys must always unique tuple. difference PRIMARY KEY UNIQUE components tuple allowed NULL value using UNIQUE. hand, using PRIMARY KEY allow NULL key.","code":"---- Assigning name as a primary key ---\nCREATE TABLE MovieStar(\n  name CHAR(30) PRIMARY KEY\n  ,address VARCHAR(255)\n  ,gender CHAR(1)\n  ,birthdate DATE\n);\n\n---- You can assign keys after declaring all attributes as well! ----\nCREATE TABLE MovieStar(\n  name CHAR(30)\n  ,address VARCHAR(255)\n  ,gender CHAR(1)\n  ,birthdate DATE\n  PRIMARY KEY (name)\n);"},{"path":"data-model-overview.html","id":"algebraic-query-language","chapter":"1 Data Model Overview","heading":"1.3 Algebraic Query Language","text":"SQL built upon relational Algebra typically “syntactically sugared” optimization ease use. Relational algebra designed simple less powerful comparison languages like C Java allow optimization ease use. Relational algebra justa form algebra.\nrelational algebra, relations variables finite relations constants. Relations operands relational algebra.","code":""},{"path":"data-model-overview.html","id":"operations-of-relational-algebra","chapter":"1 Data Model Overview","heading":"1.3.1 Operations of Relational Algebra","text":"four fundamental types operations relational algebra:\n1. Selection \\(\\sigma_{C}{(R)}\\) - operation chooses subset tuples. \\(C\\) set conditions \\(R\\) input function indicating relation want apply selection .\n2. Projection \\(\\pi_{A_{1}, A_{2}, ...}\\) - operation choose subset columns. \\(A_{}\\) subscript simply attributes want project. relational algebra sets, duplicate tuples always removed.\n3. Cartesian Product \\(R \\times S\\) - concatenates two tuples together. Conventionally, attributes left side \\(\\times\\) populated first!\n4. Renaming \\(\\rho_{S{(A_{1}, A_{2}, ..., A_{n})}}{(R)}\\) - changes names attributes relations relation schema. \\(R\\) relation whos name trying change, \\(S\\) new name \\(R\\), \\(A_{1}, A_{2},..., A_{n}\\) attribute corresponding new names. attributes listed order definition relation’s schema. want change attributes, just list current names subscript along new names attributes wanted change.working multiple relations, typically follow fundamental operations set theory:\n1. Unions \\(R \\cup S\\) - set elements R S . element appears , presented union\n2. Intersection \\(R \\cap S\\) - set elements R S\n3. Difference \\(R - S\\) (R S) - set elements R, S. Note different \\(S - R\\), means set elements S, R.applying operations two tables, implement conditions :\n1. R S must schemas idential attributres domains attribute must R S\n2. operations, columns R S must orderd order attributes relations. operations \\(R = \\{Int, Char\\}\\) \\(S = \\{Char, Int\\}\\). attributes identical two relations, different names, can still apply operations relations.","code":""},{"path":"data-model-overview.html","id":"natural-joins---r-bowtie-s","chapter":"1 Data Model Overview","heading":"1.3.2 Natural Joins - \\(R \\bowtie S\\)","text":"least one component tuple R equal component S, tuples can natural join. equivalent component appear . tuple fails pair tuple another relation join know dangling tuple","code":""},{"path":"data-model-overview.html","id":"theta-joins---r-bowtie_c-s","chapter":"1 Data Model Overview","heading":"1.3.3 Theta Joins - \\(R \\bowtie_{C} S\\)","text":"Theta joins simply natural joins condition. implement theta join, simply natural join remove tuples satisfy provided conditions. Theta joins called theta joins conditions originally represented \\(\\theta\\).","code":""},{"path":"data-model-overview.html","id":"constraints","chapter":"1 Data Model Overview","heading":"1.4 Constraints","text":"","code":""}]
