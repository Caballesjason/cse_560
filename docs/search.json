[{"path":"index.html","id":"jasons-cse-560-notes","chapter":"Jason’s CSE 560 Notes","heading":"Jason’s CSE 560 Notes","text":"Hello anyone reading . Jason Caballes’ notes CSE 560 :)","code":""},{"path":"index.html","id":"syllabus","chapter":"Jason’s CSE 560 Notes","heading":"0.1 Syllabus","text":"","code":""},{"path":"index.html","id":"piazza","chapter":"Jason’s CSE 560 Notes","heading":"0.1.1 Piazza","text":"Click piazza!","code":""},{"path":"index.html","id":"zoom-link","chapter":"Jason’s CSE 560 Notes","heading":"0.1.2 Zoom Link","text":"Click zoom link!","code":""},{"path":"index.html","id":"class-weighting","chapter":"Jason’s CSE 560 Notes","heading":"0.1.3 Class Weighting","text":"","code":""},{"path":"index.html","id":"exam-schedule","chapter":"Jason’s CSE 560 Notes","heading":"0.1.4 Exam Schedule","text":"","code":""},{"path":"relational-databases.html","id":"relational-databases","chapter":"1 Relational Databases","heading":"1 Relational Databases","text":"","code":""},{"path":"relational-databases.html","id":"what-is-a-data-model","chapter":"1 Relational Databases","heading":"1.1 What is a data model?","text":"data model abstract model describe collection data can interact . Data models can also represented mathematically. exampleRelational Models \\(\\rightarrow\\) TablesSemi-structured Models \\(\\rightarrow\\) Trees/graphs (Think XML HTML files)Data models contain three parts:Structure Data - data organized?Operation Data - actions can commit data?Constraints Data - rules applied data?","code":""},{"path":"relational-databases.html","id":"the-relational-data-model","chapter":"1 Relational Databases","heading":"1.2 The Relational Data Model","text":"two mainstream types data models:Relational ModelsSemi-structured ModelsThis course primarily focus Relational Models.Data organized two-dimensional table called relation series operations based relational algebra can applied table. Relational models also include object-relational models add storage non-primitive objects methods tables.use relational models? Relational models simple intuitive use. also models underlie SQL.","code":""},{"path":"relational-databases.html","id":"relational-models-structure-operations-constraints","chapter":"1 Relational Databases","heading":"1.2.1 Relational Models: Structure, Operations, Constraints","text":"Column headers called attributes describe information provided column. relation schema describes name relation set attributes (possibly data types) relation.Attributes schema set list (values unique order matter). hand, creating relation schema, order attributes matter.rows relation called Tuples value attribute tuple called component attribute. Tuples one component attribute provided schema. practice, start relation name capital letter attributes lowercase letter. domain attribute/component data type associated . domains must atomic (primitive) data types.Relations sets tuples therefore tuples relation unique order tuples matter.subset tuples relation known instance relation. can reorder attributes therefore, components instance’s tuples, however changing order relation’s schema changes default attribute order new instances relation.Database systems store relation instance mimics relation’s schema. instance known current instance. Past versions current instance called temporal instancesFinally, set schemas relations database know “Database Schema”.","code":""},{"path":"relational-databases.html","id":"relation-keys","chapter":"1 Relational Databases","heading":"1.2.2 Relation Keys","text":"set attributes relation form key allow two tuples relation values set attributes, , tuple, components must unique tuples attributes assigned key. set attributes key relation, set attributes must key instances relation. Keys pretty common industry many real-world databases use artificial keys (think UB person Number).database systems, relations can one primary key. Primary keys can NULL value one components provided allow relation .","code":""},{"path":"relational-databases.html","id":"expressing-tables-without-relational-algebra-and-sql","chapter":"1 Relational Databases","heading":"1.3 Expressing Tables without Relational Algebra and SQL","text":"section, notation expressing relations.express relation, first declare name (remember first letter capitalized), declare attributes surrounded parentheses. attributes underlined indicates attribute part relation’s key.example:\\[\nMovies(\\underline{name}, date, genre)\n\\]example, relation’s name \\(Movies\\). \\(Movies\\) three attributes (\\(name\\), \\(date\\), \\(genre\\)). \\(name\\) key relation.","code":""},{"path":"relational-algebra.html","id":"relational-algebra","chapter":"2 Relational Algebra","heading":"2 Relational Algebra","text":"","code":""},{"path":"relational-algebra.html","id":"algebraic-query-language","chapter":"2 Relational Algebra","heading":"2.1 Algebraic Query Language","text":"SQL built upon relational Algebra simplified optimization ease use. relational algebra, relations variables finite relations constants. words, relations operands (things apply operators ) relational algebra.Database Management Systems (DBMS) process queries, first thing system translate queries relational algebra similar internal representation .talk following operations can done relational algebra:Selection \\(\\sigma_{C}{(R)}\\) - operation chooses subset tuples. \\(C\\) set conditions determines tuples chosen \\(R\\) input \\(\\sigma\\) indicates relation want execute selection .Projection \\(\\pi_{A_{1}, A_{2}, ...}\\) - operation choose subset columns. \\(A_{}\\) subscript simply attributes want project (select). relational algebra sets, duplicate tuples always removed.Cartesian Products/Joins \\(R \\times S\\) - concatenates two tuples together. Conventionally, attributes left side \\(\\times\\) populated first.Renaming \\(\\rho_{S{(A_{1}, A_{2}, ..., A_{n})}}{(R)}\\) - changes names attributes relations relation schema. \\(R\\) relation ’s name trying change, \\(S\\) new name \\(R\\), \\(A_{1}, A_{2},..., A_{n}\\) attribute corresponding new names. attributes listed order definition relation’s schema. want change attributes, just list current names subscript along new names attributes wanted change.joining relations together, typically also apply fundamental operations set theory:\n1. Unions \\(R \\cup S\\) - set elements R S . element appears , presented union\n2. Intersection \\(R \\cap S\\) - set elements R S\n3. Difference \\(R - S\\) (R S) - set elements R, S. Note different \\(S - R\\), means set elements S, R.applying operations two tables, implement constraints:\n1. R S must schemas identical attributes domains attribute must R S\n2. operations, columns R S must orderd order attributes relations. operations \\(R = \\{Int, Char\\}\\) \\(S = \\{Char, Int\\}\\). attributes identical two relations, different names, can still apply operations relations. can just rename attributes.now go depth operation.talk various operations relational algebra, define clause predicate .Clause: clause function keyword SQL allows filter tuples\nPredicate: predicate anything returns boolean (True, False, Unknown)","code":""},{"path":"relational-algebra.html","id":"selection","chapter":"2 Relational Algebra","heading":"2.2 Selection","text":"Selection chooses attributes want relation. example:Table 2.1: Displaying records 1 - 5The notation selection \\(\\sigma_{C}({R2})\\). \\(C\\) set conditions may want apply selection. input \\(R2\\) relation like pull attributes . committing operator relation, usually assign expression new relation. example:\\[\nR1 := \\sigma_{C}({R2})\n\\]\\(R1\\) new relation expression \\(\\sigma_{C}({R2})\\). \\(:=\\) assignment operator assigns \\(R1\\) relation returned \\(\\sigma_{C}({R2})\\). creating relations expression, schema inputted relation. put expression English, selecting tuples. using conditions exclude tuples!","code":"SELECT *\nFROM instructor"},{"path":"relational-algebra.html","id":"projection","chapter":"2 Relational Algebra","heading":"2.3 Projection","text":"Projection selects subset attributes relation. order attributes must specified order relation schema returned. duplicates eliminated.\\[\nR1 := \\pi_{L}({R2}) \\\\ \\text{L - List attributes R2} \\\\ \\text{English - R1 attributes \"L\" R2}\n\\]Table 2.2: Displaying records 1 - 5","code":"SELECT name\n  ,dept_name\n  ,salary\nFROM instructor"},{"path":"relational-algebra.html","id":"extended-projection","chapter":"2 Relational Algebra","heading":"2.3.1 Extended Projection","text":"can create attributes projection applying operations attributes. Think adding constant component every tuple. finding difference two columns new column.example:\\[\nR = \\begin{matrix}\n& B \\\\\n\\hline\n1 & 2 \\\\\n3 & 4\n\\end{matrix}\n\\qquad \\text{relation } R\n\\\\~\\\\~\\\\ % ~ operartor add multiple new lines\nR2 := \\pi_{+B\\rightarrow{C}, , B}({R}) \\qquad \\text{Assigning new relation } R2 \\text{  columns } , B, C\n\\\\~\\\\\nC \\text{ column generating projection expression } + B \\rightarrow{C}\n\\\\~\\\\\nR2 = \\begin{matrix}\n& B & C \\\\\n\\hline \\\\\n1 & 2 & 3 \\\\\n3 & 4 & 7 \\\\\n\\end{matrix}\n\\]","code":""},{"path":"relational-algebra.html","id":"cartesian-products-and-joins","chapter":"2 Relational Algebra","heading":"2.4 Cartesian Products and Joins","text":"","code":""},{"path":"relational-algebra.html","id":"cartesian-product","chapter":"2 Relational Algebra","heading":"2.4.1 Cartesian Product","text":"names cartesian product “product” “Cross product”. denote cartesian product two relations, use \\(\\times\\)example:\\[\nR3 := R1 \\times R2\n\\\\~\\\\\n\\text{English, R3 assigned cartesian product } R1 \\text{ } R2\n\\]Cartesian product simple takes attributes left hand \\(\\times\\) concatenates attributes right hand \\(\\times\\). attributes left hand side appear first convention. attribute name appears relations, must rename . \\(R3\\) schema \\(R1\\) \\(R2\\).","code":""},{"path":"relational-algebra.html","id":"natural-joins","chapter":"2 Relational Algebra","heading":"2.4.2 Natural Joins","text":"Natural Joins connect two relations following:Check attributes schemas relations name domainFor tuple one relation, compare attributes tuples relationIf tuples equal values shared attributes, concatenate tuples!\nleast one shared attributes equal tuples, reject join tuples!\ntuple join known dangling tuple\nleast one shared attributes equal tuples, reject join tuples!tuple join known dangling tupleAny tuples shared attributes appear tuples (duplicate attributes)Natural joins denoted \\(\\bowtie\\)Lets take following example:Suppose two relations\\[\nSells = \\begin{matrix}\nbar & beer & price \\\\\n\\hline\nJoe's & Bud & 2.50 \\\\\nJoe's & Miller & 2.75 \\\\\nSue's & Bud & 2.50 \\\\\nSue's & Coors & 3.00\n\\end{matrix} \\qquad Bars = \\begin{matrix}\nbar & address\\\\\n\\hline\nJoe's & \\text{Maple Street }\\\\\nSue's & \\text{River Road} \\\\\n\\end{matrix}\n\\]Lets join !\\[\nBarInfo := Sells \\bowtie Bars\n\\\\\n\\text{English: Relation BarInfo Sells natural join Bars}\n\\\\~\\\\\nBarInfo = \\begin{matrix}\nbar & beer & price & address \\\\\n\\hline \\\\\nJoe's & Bud & 2.50 & \\text{Maple Street} \\\\\nJoe's & Miller & 2.75 & \\text{Maple Street} \\\\\nSue's & Bud & 2.50 & \\text{River Road} \\\\\nSue's & Bud & 2.50 & \\text{River Road} \\\\\n\\end{matrix}\n\\]","code":""},{"path":"relational-algebra.html","id":"theta-joins","chapter":"2 Relational Algebra","heading":"2.4.3 Theta Joins","text":"theta join cartesian product condition. simply commit cartesian product removes tuples based set conditions. notation theta join \\(\\sigma_{C}\\) \\(C\\) set conditions. Theta joins called theta joins historically, used \\(\\theta\\) instead \\(C\\) represent set conditions.example:\\[\nR1 = \\begin{matrix}\n& B \\\\\n\\hline\n1 & 2 \\\\\n3 & 4\n\\end{matrix} \\qquad\nR2 = \\begin{matrix}\nB & C \\\\\n\\hline\n5 & 6 \\\\\n7 & 8 \\\\\n9 & 10\n\\end{matrix}\n\\\\~\\\\~\\\\\nR1 \\times R2 = \\begin{matrix}\n& R1.B & R2.B & C \\\\\n\\hline\n1 & 2 & 5 & 6 \\\\\n1 & 2 & 7 & 8 \\\\\n1 & 2 & 9 & 10 \\\\\n3 & 4 & 5 & 6 \\\\\n3 & 4 & 7 & 8 \\\\\n3 & 4 & 9 & 10 \\\\\n\\end{matrix}\n\\\\~\\\\~\\\\\nR5 := R1 \\times_{+ C < 10 \\text{ } < 2} R2\n\\\\~\\\\\nR5 = \\begin{matrix}\n& R1.B & R2.B & C \\\\\n\\hline\n1 & 2 & 5 & 6 \\\\\n1 & 2 & 7 & 8 \\\\\n3 & 4 & 5 & 6\n\\end{matrix}\n\\]","code":""},{"path":"relational-algebra.html","id":"self-joins","chapter":"2 Relational Algebra","heading":"2.4.4 Self Joins","text":"PLEASE FIND EXAMPLE SELF JOIN TEXTBOOK","code":""},{"path":"relational-algebra.html","id":"renaming","chapter":"2 Relational Algebra","heading":"2.5 Renaming","text":"rename operation simply renames relations attributes. renaming relation, returned relation retains tuples, different names. notation renaming operation \\[\n\\rho_{S(A_{1}, A_{2}, ...A_{n})}{(R)}\n\\\\~\\\\\nS: \\text{ relations new name} \\qquad A_{}: \\text{ new names relations attributes}\n\\\\~\\\\\n(R): \\text{ relation renaming}\n\\]Note:attributes subscript, renaming relationIf renaming least one attribute, must list attributes order appears schema new names suppose renamed current names renamed","code":""},{"path":"relational-algebra.html","id":"complex-expressions","chapter":"2 Relational Algebra","heading":"2.6 Complex Expressions","text":"Like algebra, can combine expressions create complex expressions!three ways express relation arithmetic:Sequences assignment statementsExpressions multiple operatorsExpression TreesIn regular algebra, order precedence operations (PEMDAS). Likewise, order precedence operations relational algebra followsSelection, Projection, Renaming - \\(\\sigma, \\pi, \\rho\\)Natural joins/Cartesian Products - \\(\\times, \\bowtie\\)Intersections - \\(\\cap\\)Unions, Difference \\(\\cup, -\\)now explore different methods expressing relational arithmetic.","code":""},{"path":"relational-algebra.html","id":"sequence-order-of-operations","chapter":"2 Relational Algebra","heading":"2.6.1 Sequence (Order) of Operations","text":"can rewrite expression \\(R3 := R1 \\bowtie_{C} R2\\) sequence small expressions:\\(R4 := R1 \\times R2 \\qquad \\text{Commit cartesian product}\\)\\(R3 := \\sigma_{C}{(R4)} \\qquad \\text{Commit seleciton}\\)","code":""},{"path":"relational-algebra.html","id":"expression-trees","chapter":"2 Relational Algebra","heading":"2.6.2 Expression Trees","text":"Using relations \\(Bars(name, addr)\\) \\(Sells(bar, beer, price)\\), find names \nbars either Maple St. sell Bud less $3.can express example expression tree leaf node relation parent node operation. head tree new relation!can see left hand side tree relation (leaf node) \\(Bars\\), selection. Finally projection! right hand side . traverse tree, finally join sides union","code":""},{"path":"relational-algebra.html","id":"schemas-for-results","chapter":"2 Relational Algebra","heading":"2.6.3 Schemas for Results","text":"relations created relational algebra affect schemas?Union, intersection, difference: schemas two oprands must identical, therefore schema becomes schema resultSelection: schema result schema operandProjection: chosen attributes become schemaCartesian Product: schema attributes relations product (Use RelationName.attribute) common attributesThea Join: schema attributes relations product (Use RelationName.attribute) common attributesNatural Join: union two attributes relation repeats shared attributes.Renaming: operator tells schema","code":""},{"path":"relational-algebra.html","id":"relational-algebra-on-bags","chapter":"2 Relational Algebra","heading":"2.7 Relational Algebra on Bags","text":"bag set duplicate values normal mathematical sets special case bags elements bag ","code":""},{"path":"relational-algebra.html","id":"operations-on-bags","chapter":"2 Relational Algebra","heading":"2.7.1 Operations on Bags","text":"Selection: Selection chooses tuples, works exactly like selection setsProjection: Like projection sets, chosen attributes become schema, duplications removedCartesian Product/joins: regular sets, however duplicates removedBag Union: union bags, duplicates removedBag Intersection: intersection bags, duplicates removedBag Difference: elements appear difference bags \\(- B\\) sets, treat element (even duplicates) entity","code":""},{"path":"introducion-to-sql.html","id":"introducion-to-sql","chapter":"3 Introducion to SQL","heading":"3 Introducion to SQL","text":"","code":""},{"path":"introducion-to-sql.html","id":"partition-of-the-sql-language","chapter":"3 Introducion to SQL","heading":"3.1 Partition of the SQL language","text":"current standard SQL SQL-99. two aspects SQL language:\n1. Data Definition Language (DDL) declare database schemas\n2. Data Manipulation Language (DML) sub-language querying/modifying databases","code":""},{"path":"introducion-to-sql.html","id":"why-sql","chapter":"3 Introducion to SQL","heading":"3.1.1 Why SQL?","text":"SQL high level language. using SQL, simply ask “” rather “.”. allows disregard complex data manipulation DBMS utilize query optimizations optimize queries.","code":""},{"path":"introducion-to-sql.html","id":"relations-in-sql","chapter":"3 Introducion to SQL","heading":"3.2 Relations in SQL","text":"SQL makes distinction three kinds relations:\n1. Stored relations, called tables\n2. Views, relations designed computation. relations stored memory, constructed needed\n3. Temporary Tables constructed SQL language processor executing queries data modifications. relations stored memory discarded longer used.dive operations SQL, go order execution query. order execution query followsFROMJOINWHEREGROUP BYHAVINGSELECTORDER BYLIMITThis also meaning single relation queryTo declare schema stored relation, following","code":"CREATE TABLE MovieStar( -- CREATE TABLE Initializes the create of the MovieStar schema\n  name CHAR(30)         -- For every attribute, declare its data type\n  ,address CHAR(30)\n  ,gender char(1)\n  ,birthdate date\nPRIMARY KEY (name)  -- Assign the name attribute as the primary key for the schema\n);"},{"path":"introducion-to-sql.html","id":"foreign-keys","chapter":"3 Introducion to SQL","heading":"3.3 Foreign Keys","text":"foreign key designed create relationship two relations utilizing attributes similar . say “similar”attributes can different names relation. Foreign keys reference primary keys “unique” attributes relations.table contains foreign key referencing attribute another table. relations foreign key referencing table relation referencing relation referring known referenced table. constraint many foreign keys table may , long define relationship another relation.two ways declare column foreign key. use keyword REFERENCE.","code":"CREATE TABLE Student(\n  id VARCHAR(5)\n  ,name VARCHAR(20) NOT NULL\n  ,dept_name VARCHAR(20)\n  ,tot_cred NUMERIC(3, 0) -- 3 indicates the total # of digits allowed for the float while 0 indicates the number of digits allowed after the decimal point\n  ,PRIMARY KEY (id)\n  ,FOREIGN KEY (dept_name) REFERENCES department\n);\n\n-- This needs to be reviewed"},{"path":"introducion-to-sql.html","id":"select-from-where-statements","chapter":"3 Introducion to SQL","heading":"3.4 SELECT, FROM, WHERE Statements","text":"SELECT: Chooses subset tuplesFROM: Chooses relation pull data fromWHERE: Choose tuples based conditions","code":""},{"path":"introducion-to-sql.html","id":"relation-schema-modification","chapter":"3 Introducion to SQL","heading":"3.5 Relation Schema Modification","text":"","code":""},{"path":"introducion-to-sql.html","id":"deleting-relations","chapter":"3 Introducion to SQL","heading":"3.5.1 Deleting Relations","text":"can delete relations","code":"DELETE -- Some Table\n\n-- We can also do this\nDELETE FROM -- Some Table"},{"path":"introducion-to-sql.html","id":"altering-tables","chapter":"3 Introducion to SQL","heading":"3.5.2 Altering Tables","text":"alter tables","code":"-- Adding a attribute \"surname\" to Instructor1 --\nALTER TABLE Instructor1 ADD surname CHAR(100);\n\n-- Dropping surname from Instructor1 --\nALTER TABLE Instructor1 DROP surname;\n\n-- Renaming department attribute to dept from Instructor\nALTER TABLE Instuctor RENAME COLUMN Department TO dept;\n\n-- Renaming relation Instructor to \"Teacher\"\nALTER TABLE Instuctor RENAME TO Teacher;"},{"path":"introducion-to-sql.html","id":"select","chapter":"3 Introducion to SQL","heading":"3.6 SELECT","text":"SELECT chooses attributes want query. corresponds projection operator \\(\\pi_{C}{(R)}\\). SQL, names relations attributes case sensitive. practice, keywords capitalized.example:(#tab:SELECT Example)Displaying records 1 - 5A short handed way project attributes relation using asterisk *.SQL interpreted language (like python). Therefore code gets executed line line! Likewise tuple relation gets evaluated one time see returned output relation.example, suppose following query:every tuple, name component evaluated. component value “Anheuser-Busch”, tuple returned new relation!can also add new attributes using attributes relation retrieving data .","code":"-- Using the SELECT clause to grab the name attribute! --\nSELECT name\nFROM instructor;-- Return all attributes for all tuples with manf=Anheuser-Busch\nSELECT *\nFROM Beers\nWHERE manf='Anheuser-Busch';-- Grabbing the 'name' attribute from Beers --\nSELECT name\nFROM Beers\nWHERE manf='Anheuser-Busch';SELECT bar,\n  ,beer\n  ,price*114 AS PriceInYen\nFROM Sells;"},{"path":"introducion-to-sql.html","id":"distinctall","chapter":"3 Introducion to SQL","heading":"3.6.1 DISTINCT/ALL","text":"SQL allows duplicate tuples, therefore, return strictly unique tuples, can use DISTINCT clause.example:(#tab:DISTINCT Example)Displaying records 1 - 5In contrast, SQL keyword allows explicitly state duplicates removed.(#tab:Example)Displaying records 1 - 5The rest examples section use following relations\\[\nBeers(\\underline{name}, manf) \\\\\nBars (\\underline{name}, addr, license) \\\\\nDrinkers(\\underline{name}, addr, phone) \\\\\nLikes(\\underline{drinker}, {beer}) \\\\\nSells(\\underline{bar}, {beer}, price) \\\\\nFrequents(\\underline{drinker}, {bar})\n\\\\~\\\\\n\\text{Note: underlined attributes indicate keys}\n\\]\n\nanother example using .Using Frequents Likes, list drinks go higher number different bars like different beers many times difference counts.query, EXCEPT returns distinct rows top query bottom query.another example using DISTINCT.\nSells, find different prices charged beersIf distinct used, output relation see duplicates prices!","code":"-- Grabbing the unique department names from Instructor --\nSELECT DISTINCT dept_name\nFROM Instructor;-- Grabbing all instances of dept_name attribute from Instructor --\nSELECT ALL dept_name\nFROM Instructor;SELECT drinker\nFROM Frequents\n\nEXCEPT ALL\n\nSELECT drinker\nFROM Likes;SELECT DISTINCT price\nFROM Sells;"},{"path":"introducion-to-sql.html","id":"select-and-literals","chapter":"3 Introducion to SQL","heading":"3.6.2 SELECT and Literals","text":"can assign relations contain literals (primative data type).example:(#tab:SELECT Literal)1 recordsHere returned \\(1 \\times 1\\) relation attribute name Literal value “437”.add , query, \\(n\\times{1}\\) relation \\(n\\) tuples relation referencing .(#tab:SELECT Literal Example 2)Displaying records 1 - 5","code":"-- Selecting a literal --\nSELECT '437' AS 'Literal';-- Selecting a literal with FROM --\nSELECT '437' AS 'Literal'\nFROM instructor;"},{"path":"introducion-to-sql.html","id":"where","chapter":"3 Introducion to SQL","heading":"3.7 WHERE","text":"","code":""},{"path":"introducion-to-sql.html","id":"from","chapter":"3 Introducion to SQL","heading":"3.8 FROM","text":"","code":""},{"path":"introducion-to-sql.html","id":"rename","chapter":"3 Introducion to SQL","heading":"3.9 RENAME","text":"","code":""},{"path":"introducion-to-sql.html","id":"patterns","chapter":"3 Introducion to SQL","heading":"3.10 Patterns","text":"","code":""},{"path":"introducion-to-sql.html","id":"like","chapter":"3 Introducion to SQL","heading":"3.10.1 Like","text":"","code":""},{"path":"introducion-to-sql.html","id":"null","chapter":"3 Introducion to SQL","heading":"3.11 Null","text":"","code":""},{"path":"introducion-to-sql.html","id":"multiple-relational-queries","chapter":"3 Introducion to SQL","heading":"3.12 Multiple Relational Queries","text":"","code":""},{"path":"introducion-to-sql.html","id":"joining-two-relations","chapter":"3 Introducion to SQL","heading":"3.13 Joining Two Relations","text":"","code":""},{"path":"introducion-to-sql.html","id":"explicit-tuple-variables","chapter":"3 Introducion to SQL","heading":"3.14 Explicit Tuple-Variables","text":"","code":""},{"path":"introducion-to-sql.html","id":"self-joins-1","chapter":"3 Introducion to SQL","heading":"3.15 Self-Joins","text":"","code":""},{"path":"introducion-to-sql.html","id":"subqueries","chapter":"3 Introducion to SQL","heading":"3.16 Subqueries","text":"","code":""},{"path":"introducion-to-sql.html","id":"set-operations","chapter":"3 Introducion to SQL","heading":"3.17 Set Operations","text":"","code":""},{"path":"introducion-to-sql.html","id":"single-tuple-subquery","chapter":"3 Introducion to SQL","heading":"3.18 Single-Tuple Subquery","text":"","code":""},{"path":"introducion-to-sql.html","id":"query-subquery","chapter":"3 Introducion to SQL","heading":"3.19 Query + Subquery","text":"","code":""},{"path":"introducion-to-sql.html","id":"between","chapter":"3 Introducion to SQL","heading":"3.20 Between","text":"","code":""},{"path":"introducion-to-sql.html","id":"in","chapter":"3 Introducion to SQL","heading":"3.21 In","text":"","code":""},{"path":"introducion-to-sql.html","id":"exists","chapter":"3 Introducion to SQL","heading":"3.22 Exists","text":"","code":""},{"path":"introducion-to-sql.html","id":"any","chapter":"3 Introducion to SQL","heading":"3.23 Any","text":"","code":""},{"path":"introducion-to-sql.html","id":"except","chapter":"3 Introducion to SQL","heading":"3.24 Except","text":"","code":""},{"path":"introducion-to-sql.html","id":"union-intersection-difference","chapter":"3 Introducion to SQL","heading":"3.25 Union, Intersection, Difference","text":"","code":""},{"path":"introducion-to-sql.html","id":"recursive-queries","chapter":"3 Introducion to SQL","heading":"3.26 Recursive Queries","text":"","code":""},{"path":"introducion-to-sql.html","id":"bag-semantics","chapter":"3 Introducion to SQL","heading":"3.27 Bag Semantics","text":"","code":""}]
