[{"path":"index.html","id":"jasons-cse-560-notes","chapter":"Jason’s CSE 560 Notes","heading":"Jason’s CSE 560 Notes","text":"Hello anyone reading . Jason Caballes’ notes CSE 560 :)","code":""},{"path":"index.html","id":"syllabus","chapter":"Jason’s CSE 560 Notes","heading":"0.1 Syllabus","text":"","code":""},{"path":"index.html","id":"piazza","chapter":"Jason’s CSE 560 Notes","heading":"0.1.1 Piazza","text":"Click piazza!","code":""},{"path":"index.html","id":"zoom-link","chapter":"Jason’s CSE 560 Notes","heading":"0.1.2 Zoom Link","text":"Click zoom link!","code":""},{"path":"index.html","id":"class-weighting","chapter":"Jason’s CSE 560 Notes","heading":"0.1.3 Class Weighting","text":"","code":""},{"path":"index.html","id":"exam-schedule","chapter":"Jason’s CSE 560 Notes","heading":"0.1.4 Exam Schedule","text":"","code":""},{"path":"relational-databases.html","id":"relational-databases","chapter":"1 Relational Databases","heading":"1 Relational Databases","text":"","code":""},{"path":"relational-databases.html","id":"what-is-a-data-model","chapter":"1 Relational Databases","heading":"1.1 What is a data model?","text":"data model abstract model describe collection data can interact . Data models can also represented mathematically. exampleRelational Models \\(\\rightarrow\\) TablesSemi-structured Models \\(\\rightarrow\\) Trees/graphs (Think XML HTML files)Data models contain three parts:Structure Data - data organized?Operation Data - actions can commit data?Constraints Data - rules applied data?","code":""},{"path":"relational-databases.html","id":"the-relational-data-model","chapter":"1 Relational Databases","heading":"1.2 The Relational Data Model","text":"two mainstream types data models:Relational ModelsSemi-structured ModelsThis course primarily focus Relational Models.Data organized two-dimensional table called relation series operations based relational algebra can applied table. Relational models also include object-relational models add storage non-primitive objects methods tables.use relational models? Relational models simple intuitive use. also models underlie SQL.","code":""},{"path":"relational-databases.html","id":"relational-models-structure-operations-constraints","chapter":"1 Relational Databases","heading":"1.2.1 Relational Models: Structure, Operations, Constraints","text":"Column headers called attributes describe information provided column. relation schema describes name relation set attributes (possibly data types) relation.Attributes schema set list (values unique order matter). hand, creating relation schema, order attributes matter.rows relation called Tuples value attribute tuple called component attribute. Tuples one component attribute provided schema. practice, start relation name capital letter attributes lowercase letter. domain attribute/component data type associated . domains must atomic (primitive) data types.Relations sets tuples therefore tuples relation unique order tuples matter.subset tuples relation known instance relation. can reorder attributes therefore, components instance’s tuples, however changing order relation’s schema changes default attribute order new instances relation.Database systems store relation instance mimics relation’s schema. instance known current instance. Past versions current instance called temporal instancesFinally, set schemas relations database know “Database Schema”.","code":""},{"path":"relational-databases.html","id":"relation-keys","chapter":"1 Relational Databases","heading":"1.2.2 Relation Keys","text":"set attributes relation form key allow two tuples relation values set attributes, , tuple, components must unique tuples attributes assigned key. set attributes key relation, set attributes must key instances relation. Keys pretty common industry many real-world databases use artificial keys (think UB person Number).database systems, relations can one primary key. Primary keys can NULL value one components provided allow relation .","code":""},{"path":"relational-databases.html","id":"expressing-tables-without-relational-algebra-and-sql","chapter":"1 Relational Databases","heading":"1.3 Expressing Tables without Relational Algebra and SQL","text":"section, notation expressing relations.express relation, first declare name (remember first letter capitalized), declare attributes surrounded parentheses. attributes underlined indicates attribute part relation’s key.example:\\[\nMovies(\\underline{name}, date, genre)\n\\]example, relation’s name \\(Movies\\). \\(Movies\\) three attributes (\\(name\\), \\(date\\), \\(genre\\)). \\(name\\) key relation.","code":""},{"path":"relational-algebra.html","id":"relational-algebra","chapter":"2 Relational Algebra","heading":"2 Relational Algebra","text":"","code":""},{"path":"relational-algebra.html","id":"algebraic-query-language","chapter":"2 Relational Algebra","heading":"2.1 Algebraic Query Language","text":"SQL built upon relational Algebra typically “syntactically sugared” optimization ease use. different approach comparison Java C. Java C allows freedom choice manipulate/organize data. can used optimize code, require knowledge . SQL simplistic avoid knowledge gap. Relational algebra just form algebra. relational algebra, relations variables finite relations constants. words, relations operands relational algebra.Database Management Systems (DBMS) process queries, first thing system translate queries relational algebra similar internal representation .talk following operations can done relational algebra:Selection \\(\\sigma_{C}{(R)}\\) - operation chooses subset tuples. \\(C\\) set conditions determines tuples chosen \\(R\\) input \\(\\sigma\\) indicates relation want execute selection .Projection \\(\\pi_{A_{1}, A_{2}, ...}\\) - operation choose subset columns. \\(A_{}\\) subscript simply attributes want project (select). relational algebra sets, duplicate tuples always removed.Cartesian Products/Joins \\(R \\times S\\) - concatenates two tuples together. Conventionally, attributes left side \\(\\times\\) populated first!Renaming \\(\\rho_{S{(A_{1}, A_{2}, ..., A_{n})}}{(R)}\\) - changes names attributes relations relation schema. \\(R\\) relation whos name trying change, \\(S\\) new name \\(R\\), \\(A_{1}, A_{2},..., A_{n}\\) attribute corresponding new names. attributes listed order definition relation’s schema. want change attributes, just list current names subscript along new names attributes wanted change.working multiple relations, typically also apply fundamental operations set theory:\n1. Unions \\(R \\cup S\\) - set elements R S . element appears , presented union\n2. Intersection \\(R \\cap S\\) - set elements R S\n3. Difference \\(R - S\\) (R S) - set elements R, S. Note different \\(S - R\\), means set elements S, R.applying operations two tables, implement constraints :\n1. R S must schemas identical attributes domains attribute must R S\n2. operations, columns R S must orderd order attributes relations. operations \\(R = \\{Int, Char\\}\\) \\(S = \\{Char, Int\\}\\). attributes identical two relations, different names, can still apply operations relations. can just rename attributes.now go depth operation.","code":""},{"path":"relational-algebra.html","id":"relational-algebra-operations","chapter":"2 Relational Algebra","heading":"2.2 Relational Algebra Operations","text":"","code":""},{"path":"relational-algebra.html","id":"natural-joins---r-bowtie-s","chapter":"2 Relational Algebra","heading":"2.2.1 Natural Joins - \\(R \\bowtie S\\)","text":"least one component tuple R equal component S, tuples can natural join. equivalent component appear . tuple fails pair tuple another relation join know dangling tuple","code":""},{"path":"relational-algebra.html","id":"theta-joins---r-bowtie_c-s","chapter":"2 Relational Algebra","heading":"2.2.2 Theta Joins - \\(R \\bowtie_{C} S\\)","text":"Theta joins simply natural joins condition. implement theta join, simply natural join remove tuples satisfy provided conditions. Theta joins called theta joins conditions originally represented \\(\\theta\\).","code":""},{"path":"introducion-to-sql.html","id":"introducion-to-sql","chapter":"3 Introducion to SQL","heading":"3 Introducion to SQL","text":"","code":""},{"path":"introducion-to-sql.html","id":"defining-relationship-schemas-in-sql","chapter":"3 Introducion to SQL","heading":"3.1 Defining Relationship Schemas in SQL","text":"current standard SQL SQL-99. two aspects SQL:\n1. Data-Definition declare database schemas\n2. Data_Manipulation sub-language querying/modifying databases","code":""},{"path":"introducion-to-sql.html","id":"relations-in-sql","chapter":"3 Introducion to SQL","heading":"3.1.1 Relations in SQL","text":"SQL makes distinction three kinds relations:\n1. Stored relations, called tables\n2. Views, relations designed computation. relations stored, constructed needed\n3. Temporary Tables constructed SQL language processor executing queries data modifications. relations stored discarded longer used.declare schema stored relation, following","code":"CREATE TABLE -- SOME TABLE NAME --"},{"path":"introducion-to-sql.html","id":"data-types","chapter":"3 Introducion to SQL","heading":"3.1.2 Data Types","text":"following primitive data types supported SQL","code":""},{"path":"introducion-to-sql.html","id":"character-strings","chapter":"3 Introducion to SQL","heading":"3.1.2.1 Character Strings","text":"can fixed variable length. type fixed length character string, use CHAR(n) length \\(n\\). create variable length character string, use VARCHAR(n) length \\(n\\). component tuple domain CHAR(n) given length component less \\(n\\), component padded white space.","code":""},{"path":"introducion-to-sql.html","id":"bit-strings","chapter":"3 Introducion to SQL","heading":"3.1.2.2 Bit Strings","text":"Bit strings can fixed varying length. data type analogous character strings, values strings bits rather characters.","code":""},{"path":"introducion-to-sql.html","id":"booleans","chapter":"3 Introducion to SQL","heading":"3.1.2.3 BOOLEANs","text":"Booleans denote attribute whose value logical. possible values boolean can take TRUE, FALSE, UNKNOWN.","code":""},{"path":"introducion-to-sql.html","id":"ints","chapter":"3 Introducion to SQL","heading":"3.1.2.4 INTs","text":"Ints (Integers) denote integer value. SHORTINT also int may less bits.","code":""},{"path":"introducion-to-sql.html","id":"floating-point-numbers","chapter":"3 Introducion to SQL","heading":"3.1.2.5 Floating-Point Numbers","text":"Floating points denoted FLOAT REAL. like higher precision floats, use DOUBLE PRECISION. Like character strings, floats can fixed decimal length. can declare decimal length calling DECIMAL(n, d) \\(n\\) total number digits allowed float nad \\(d\\) number digits passed decimal.","code":""},{"path":"introducion-to-sql.html","id":"dates-and-times","chapter":"3 Introducion to SQL","heading":"3.1.2.6 Dates and Times","text":"Dates times declared using DATE TIME respectively. Dates times special form character strings. Adding string DATE declaration specifies format date. example DATE '1948-05-14' creates date value form “YYYY-MM-DD”. can done time. example TIME '15:00:02.5' specifies want represent time format “HH:MM:SS” attachment milliseconds.follow simple example Relation Schema declaration","code":"CREATE TABLE Movies(\n  title CHAR(100) -- Character string with 100 characters\n  ,year INT\n  ,lengh INT\n  ,genre CHAR(10)\n  ,studioName CHAR(30)\n  ,producerC# INT\n);"},{"path":"introducion-to-sql.html","id":"modifying-relation-schemas","chapter":"3 Introducion to SQL","heading":"3.1.3 Modifying Relation Schemas","text":"delete “drop” table database, execute followingWhen dropping able, table longer exists database schema. modify existing table, use ALTER keyword","code":"DROP TABLE -- SOME TABLE --;---- Modifying a table to add a new attribute to its schema ----\nALTER TABLE -- SOME TABLE -- ADD -- SOME ATTRIBUTE -- CHAR(16); \n\n---- Modifying a table to remove an attribute from its schema ----\nALTER TABLE -- SOME TABLE -- DROP -- SOME ATTRIBUTE IN SCHEMA --; "},{"path":"introducion-to-sql.html","id":"default-values","chapter":"3 Introducion to SQL","heading":"3.1.4 Default Values","text":"adding new attribute relation’s schema, tuples require value attribute. Database systems default value NULL, want specific value default ? data uploaded randomly tuples values component? case can use DEFAULT keyword add specific value instead using NULL.","code":"---- Creating attributes and adding a default value when no data is made available ----\ngender CHAR(1) DEFAULT '?'\nname VARCHAR(10) DEFAULT 'No Name :('"},{"path":"introducion-to-sql.html","id":"declaring-keys","chapter":"3 Introducion to SQL","heading":"3.1.4.1 Declaring Keys","text":"two ways assign set attributes key. Keys defined declaration database schema, .e. CREATE TABLE statement.Use PRIMARY KEY UNIQUE declare set attributes key. Remember, keys must always unique tuple. difference PRIMARY KEY UNIQUE components tuple allowed NULL value using UNIQUE. hand, using PRIMARY KEY allow NULL key.","code":"---- Assigning name as a primary key ---\nCREATE TABLE MovieStar(\n  name CHAR(30) PRIMARY KEY\n  ,address VARCHAR(255)\n  ,gender CHAR(1)\n  ,birthdate DATE\n);\n\n---- You can assign keys after declaring all attributes as well! ----\nCREATE TABLE MovieStar(\n  name CHAR(30)\n  ,address VARCHAR(255)\n  ,gender CHAR(1)\n  ,birthdate DATE\n  PRIMARY KEY (name)\n);"},{"path":"introducion-to-sql.html","id":"constraints","chapter":"3 Introducion to SQL","heading":"3.2 Constraints","text":"","code":""}]
